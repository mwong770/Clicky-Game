{"version":3,"sources":["components/Instructions/Instructions.js","components/Score/Score.js","components/Header/Header.js","components/PokemonCard/PokemonCard.js","components/Game/Game.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","props","id","Score","className","message","score","topScore","Header","alt","src","PokemonCard","color","onClick","handleClick","image","Game","state","data","setState","guessedCorrectly","updatedData","map","item","clicked","handleCorrectGuess","resetGame","updatedScore","updatedTopScore","Math","max","shuffleCards","unclickedData","forEach","element","index","randIdx","parseInt","random","length","temp","this","console","log","character","key","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6376945c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Instructions.css\";\n\nconst Instructions = props => (\n    <div>\n        <p id=\"title\">The Clicky Game</p>\n        <p id=\"instructions\">Click on a character to earn points, BUT don't click on any character twice.</p>\n    </div>\n);\n\nexport default Instructions;","import React from \"react\";\nimport \"./Score.css\";\n\nconst Score = props => (\n    <div className=\"container\">\n        <div id=\"score-row\" className=\"row\">\n            <div id=\"message\" className=\"col s12 l4 offset-l4\">\n                <span>{props.message}</span>\n            </div>\n            <div id=\"score\" className=\"col s12 l4\">\n                <span> Score: <span>{props.score}</span> | </span>\n                <span> Top Score: <span>{props.topScore}</span></span>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Score;","import React from \"react\";\nimport \"./Header.css\";\nimport Instructions from \"../Instructions\";\nimport Score from \"../Score\";\n\nconst Header = props => (\n    <header className=\"row\">\n        <div id=\"headerCard\" className=\"col s12\">\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <img alt=\"pokemon characters\" src=\"./assets/images/pokemon-header.jpg\" />\n                </div>\n                <div className=\"card-content yellow lighten-3\">\n                    <Instructions />\n                    <Score\n                        score={props.score}\n                        topScore={props.topScore}\n                        message={props.message}\n                    />\n                </div>\n            </div>\n        </div>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./PokemonCard.css\";\n\nconst PokemonCard = props => (\n    <div id=\"pokemonContainer\" className=\"col s4 l3\">\n        <div id=\"pokemon-card\" className={`card ${props.color} lighten-2 hoverable`}>\n            <div className=\"card-image\"\n                onClick={() => props.handleClick(props.id)}>\n                <img alt=\"pokemon character\" src={`${props.image}`} />\n            </div>\n        </div>\n    </div>\n);\n\nexport default PokemonCard;\n","import React, { Component } from \"react\";\nimport Header from \"../Header\";\nimport Card from \"../PokemonCard\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: null\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleCards(this.state.data) });\n    }\n\n    handleClick = id => {\n        if (this.state.message) {\n            this.setState({\n                message: null\n            });\n        }\n        let guessedCorrectly = false;\n        // loop through data\n        let updatedData = this.state.data.map(item => {\n            // find card by id\n            if (item.id === id) {\n                // if hasn't been clicked already\n                if (!item.clicked) {\n                    // mark clicked\n                    item.clicked = true;\n                    guessedCorrectly = true;\n                }\n            }\n            return item;\n        });\n        guessedCorrectly ? this.handleCorrectGuess(updatedData) : this.resetGame();\n    }\n\n    handleCorrectGuess = updatedData => {\n        let updatedScore = this.state.score + 1;\n        let updatedTopScore = Math.max(updatedScore, this.state.topScore);\n        if (updatedScore === 12) {\n            this.setState({\n                message: \"You Win!\",\n                topScore: 12\n            });\n            this.resetGame();\n        } else {\n            this.setState({\n                data: this.shuffleCards(updatedData),\n                score: updatedScore,\n                topScore: updatedTopScore\n            });\n        }\n    };\n\n    resetGame = () => {\n        let unclickedData = data.map(item => {\n            item.clicked = false;\n            return item;\n        });\n        this.setState({\n            data: this.shuffleCards(unclickedData),\n            score: 0\n        });\n    };\n\n    shuffleCards = data => {\n        data.forEach((element, index) => {\n            let randIdx = parseInt(Math.random() * data.length);\n            let temp = data[index];\n            data[index] = data[randIdx];\n            data[randIdx] = temp;\n        });\n        return data;\n    };\n\n    render() {\n        console.log(\"state\", this.state.data);\n        return (\n            <div>\n                <Header\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                    message={this.state.message}\n                />\n                <main>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            {\n                                this.state.data.map((character) => (\n                                    <Card\n                                        key={character.id}\n                                        id={character.id}\n                                        handleClick={this.handleClick}\n                                        color={character.color}\n                                        image={character.image}\n                                        />\n                                    )\n                                )\n                            }\n                        </div>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = props => (\n    <footer className=\"footer-copyright center-align light-blue\">\n        Copyright &#169; 2019 Maria Wong\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport Game from \"./components/Game\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n    return (\n        <div>\n            <Game />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}